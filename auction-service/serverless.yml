service: auction-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements: 
        - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
        - ${file(iam/MailQueueIAM.yml):MailQueueIAM}

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}

functions:
  createAuction:
    handler: handler.createAuction
    events:
      - http:
          method: POST
          path: auction
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: handler.getAuctions
    events:
      - http:
          method: GET
          path: auctions
          authorizer: ${self:custom.authorizer}

  getAuction:
    handler: handler.getAuction
    events:
      - http:
          method: GET
          path: auction/{id}
          request:
            parameters:
              paths:
                id: true
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: handler.placeBid
    events:
      - http:
          method: PATCH
          path: auction/{id}/bid
          request:
            parameters:
              paths:
                id: true
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: handler.processAuctions
    # events:
    #   - schedule: rate(1 minute)

custom:
  authorizer: arn:aws:lambda:${aws:region}:${aws:accountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
